{"version":3,"sources":["views/admin/article/manage/queryForm.jsx","views/admin/article/manage/index.jsx"],"names":["RangePicker","Option","QueryForm","state","article","colon","elements","key","label","widget","props","tagList","map","item","name","categoryList","labelCol","wrapperCol","formItemProps","className","e","preventDefault","form","validateFieldsAndScroll","errors","values","console","log","getQuery","handleSubmit","getFormMeta","Component","PropTypes","func","isRequired","create","Manager","colorList","common","colorMap","list","pagination","total","loading","title","dataIndex","render","text","record","d","count","backgroundColor","sorter","a","b","comments","createdAt","isBefore","updatedAt","setTop","id","pathname","articleId","handleDelete","showOrder","axios","put","then","find","setState","current","pageSize","query","get","params","page","res","rows","fetchList","confirm","content","onOk","delete","code","success","message","forEach","getColumns","handleChange"],"mappings":"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","file":"manage.0d40e536.js","sourceRoot":"../../src","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Button, Form, Input, Select, DatePicker, Checkbox, Radio } from 'antd'\nimport FormBuilder from '../../../../components/helper/FormBuilder'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\n\nconst RangePicker = DatePicker.RangePicker\nconst Option = Select.Option\n\n@connect(state => state.article)\nclass QueryForm extends Component {\n  static propTypes = {\n    getQuery: PropTypes.func.isRequired\n  }\n\n  getFormMeta = () => {\n    return {\n      colon: true,\n      elements: [\n        {\n          key: 'title',\n          label: '标题',\n          widget: <Input placeholder=\"请输入文章标题\" />\n        },\n        {\n          key: 'tag',\n          label: '标签',\n          widget: (\n            <Select className=\"form-select\" allowClear>\n              {this.props.tagList.map(item => (\n                <Option key={item.name} value={item.name}>\n                  {item.name}\n                </Option>\n              ))}\n            </Select>\n          )\n        },\n        {\n          key: 'category',\n          label: '分类',\n          widget: (\n            <Select className=\"form-select\" allowClear>\n              {this.props.categoryList.map(item => (\n                <Option key={item.name} value={item.name}>\n                  {item.name}\n                </Option>\n              ))}\n            </Select>\n          )\n        },\n        {\n          key: 'fetchTop',\n          label: '置顶文章',\n          labelCol: 20,\n          wrapperCol: 4,\n          formItemProps: { className: 'form-checkbox-wrap' },\n          widget: <Checkbox />\n        }\n        // {\n        //   key: 'rangTime',\n        //   label: '创建时间',\n        //   widget: (\n        //     <RangePicker\n        //       ranges={{\n        //         Today: [moment(), moment()],\n        //         'This Month': [moment().startOf('month'), moment().endOf('month')]\n        //       }}\n        //       format=\"YYYY/MM/DD HH:mm:ss\"\n        //     />\n        //   )\n        // }\n      ]\n    }\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    this.props.form.validateFieldsAndScroll((errors, values) => {\n      if (errors) return\n      console.log('submit form: ', values)\n      this.props.getQuery(values)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"query-form\">\n        <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n          <FormBuilder meta={this.getFormMeta()} form={this.props.form}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              检索\n            </Button>\n          </FormBuilder>\n        </Form>\n      </div>\n    )\n  }\n}\n\nexport default Form.create()(QueryForm)\n","import React, { Component } from 'react'\nimport './index.less'\n\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { random, getCommentsCount } from '../../../../lib'\nimport { Table, Divider, Tag, Modal, message, Badge, Button } from 'antd'\nimport QueryForm from './queryForm'\nimport moment from 'moment'\n\n@connect(state => ({\n  colorList: state.common.colorList,\n  tagList: state.article.tagList\n}))\nclass Manager extends Component {\n  state = {\n    colorMap: {},\n    list: [],\n    pagination: {},\n    total: 0,\n    loading: false\n  }\n\n  componentDidMount() {\n    const { colorList, tagList } = this.props\n    let colorMap = {}\n    tagList.forEach(item => {\n      colorMap[item.name] = colorList[random(colorList)]\n    })\n    this.setState({ colorMap }, () => this.fetchList({ page: 1 }))\n  }\n\n  getColumns = () => {\n    // const { colorMap } = this.state\n    return [\n      {\n        title: '标题',\n        dataIndex: 'title'\n      },\n      {\n        title: '标签',\n        dataIndex: 'tags',\n        render: (text, record) => {\n          return text.map(d => (\n            <Tag color={this.state.colorMap[d.name]} key={d.name}>\n              {d.name}\n            </Tag>\n          ))\n        }\n      },\n      {\n        title: '分类',\n        dataIndex: 'categories',\n        render: (text, record) => {\n          return text.map(d => (\n            <Tag color={'#2db7f5'} key={d.name}>\n              {d.name}\n            </Tag>\n          ))\n        }\n      },\n      {\n        title: '评论数',\n        dataIndex: 'comments',\n        render: text => {\n          const count = getCommentsCount(text)\n          return count !== 0 ? <Badge count={count} style={{ backgroundColor: '#52c41a' }} /> : count\n        },\n        sorter: (a, b) => getCommentsCount(a.comments) - getCommentsCount(b.comments)\n      },\n      {\n        title: '发布时间',\n        dataIndex: 'createdAt',\n        sorter: (a, b) => (moment(a.createdAt).isBefore(b.createdAt) ? 1 : -1)\n      },\n      {\n        title: '修改时间',\n        dataIndex: 'updatedAt',\n        sorter: (a, b) => (moment(a.updatedAt).isBefore(b.updatedAt) ? 1 : -1)\n      },\n      {\n        title: '置顶',\n        dataIndex: 'showOrder',\n        render: (text, record) =>\n          text ? (\n            <Button size=\"small\" type=\"danger\" onClick={() => this.setTop(record)}>\n              取消置顶\n            </Button>\n          ) : (\n            <Button size=\"small\" type=\"dashed\" onClick={() => this.setTop(record)}>\n              置顶文章\n            </Button>\n          )\n      },\n      {\n        title: '操作',\n        render: (text, record) => {\n          return (\n            <div className=\"action\">\n              <Link to={`/article/${record.id}`}>查看</Link>\n              <Divider type=\"vertical\" />\n              {/* <span className=\"btn-edit\">编辑</span> */}\n              <Link to={{ pathname: '/admin/articles/edit', state: { articleId: record.id } }}>编辑</Link>\n              <Divider type=\"vertical\" />\n              <span className=\"btn-delete\" onClick={() => this.handleDelete(record.id, record.title)}>\n                删除\n              </span>\n            </div>\n          )\n        }\n      }\n    ]\n  }\n\n  /**\n   * 设置置顶文章\n   *\n   * @memberof Manager\n   */\n  setTop = record => {\n    const showOrder = record.showOrder ? 0 : 1\n    this.axios.put('/article/update', {\n      articleId: record.id,\n      showOrder\n    }).then(() => {\n      const list = this.state.list\n      const target = list.find(d => d.id === record.id)\n      target.showOrder = showOrder\n      this.setState({ list })\n    })\n  }\n\n  fetchList = ({ current = 1, pageSize = 10, ...query }) => {\n    this.setState({ loading: true })\n\n    this.axios.get('/article/getList', { params: { page: current, pageSize, ...query } }).then(res => {\n      const pagination = {\n        current,\n        pageSize,\n        total: res.count\n      }\n      this.setState({ list: res.rows, pagination, loading: false })\n    })\n  }\n\n  handleChange = pagination => {\n    this.fetchList({ ...pagination, ...this.state.query })\n  }\n\n  /**\n   * @param {Number} - 文章 id\n   */\n  handleDelete = (articleId, title) => {\n    Modal.confirm({\n      title: '您确认删除该文章?，此操作不可恢复！',\n      content: `文章： ${title} `,\n      onOk: () => {\n        this.axios.delete('/article/delete', { params: { articleId } }).then(res => {\n          if (res.code === 200) {\n            this.fetchList(this.state.pagination)\n            message.success(res.message)\n          }\n        })\n      }\n    })\n  }\n\n  getQuery = query => {\n    this.setState({ query })\n\n    this.fetchList({ ...query, current: 1 })\n  }\n\n  render() {\n    const { list, pagination, loading } = this.state\n    return (\n      <div className=\"manager\">\n        <QueryForm getQuery={this.getQuery} />\n        <Table\n          rowKey=\"id\"\n          bordered\n          loading={loading}\n          columns={this.getColumns()}\n          dataSource={list}\n          pagination={pagination}\n          onChange={this.handleChange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Manager\n"]}